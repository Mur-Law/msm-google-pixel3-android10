# Copyright (C) 2025 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests that under optimize_ddk_config_actions_analysis_test, nothing big
should be executed in the execution phase."""

load("@bazel_skylib//lib:paths.bzl", "paths")
load("@bazel_skylib//lib:unittest.bzl", "analysistest", "asserts")
load(
    "//build/kernel/kleaf/impl:common_providers.bzl",
    "DdkConfigOutputsInfo",
)
load("//build/kernel/kleaf/impl:ddk/ddk_config/ddk_config_main_action_subrule.bzl", "DDK_CONFIG_MAIN_ACTION_MNEMONIC")

def _optimize_ddk_config_actions_analysis_test(ctx):
    env = analysistest.begin(ctx)
    actions = analysistest.target_actions(env)
    ddk_config_actions = [action for action in actions if action.mnemonic == DDK_CONFIG_MAIN_ACTION_MNEMONIC]
    asserts.false(env, ddk_config_actions, "Found action with mnemonic {}".format(DDK_CONFIG_MAIN_ACTION_MNEMONIC))

    # Path below bin_dir to generate files for parent.
    parent_short_path = None
    if ctx.attr.parent:
        parent_short_path = paths.join(ctx.attr.parent.label.workspace_root, ctx.attr.parent.label.package, ctx.attr.parent.label.name)

    target_under_test = analysistest.target_under_test(env)

    # Tests that the existance of out_dir matches expectation.
    asserts.equals(
        env,
        "out_dir" in ctx.attr.expects,
        bool(target_under_test[DdkConfigOutputsInfo].out_dir),
        "Must {negation}have out_dir, but got {out_dir}".format(
            negation = "" if "out_dir" in ctx.attr.expects else "not ",
            out_dir = target_under_test[DdkConfigOutputsInfo].out_dir,
        ),
    )

    # Tests that, if out_dir exists, it comes from parent.
    if target_under_test[DdkConfigOutputsInfo].out_dir:
        asserts.true(
            env,
            target_under_test[DdkConfigOutputsInfo].out_dir.short_path.startswith(parent_short_path),
            "out_dir {} must be generated by {}".format(
                target_under_test[DdkConfigOutputsInfo].out_dir,
                ctx.attr.parent,
            ),
        )

    # Tests that the existence of kconfig_ext matches expectation.
    asserts.equals(
        env,
        "kconfig_ext" in ctx.attr.expects,
        bool(target_under_test[DdkConfigOutputsInfo].kconfig_ext),
        "Must {negation}have kconfig_ext, but got {kconfig_ext}".format(
            negation = "" if "kconfig_ext" in ctx.attr.expects else "not ",
            kconfig_ext = target_under_test[DdkConfigOutputsInfo].kconfig_ext,
        ),
    )

    # Tests that, if kconfig_ext exists, it comes from parent.
    if target_under_test[DdkConfigOutputsInfo].kconfig_ext:
        asserts.true(
            env,
            target_under_test[DdkConfigOutputsInfo].kconfig_ext.short_path.startswith(parent_short_path),
            "kconfig_ext {} must be generated by {}".format(
                target_under_test[DdkConfigOutputsInfo].kconfig_ext,
                ctx.attr.parent,
            ),
        )

    # Tests that out_dir and kconfig_ext are added to default output files.
    asserts.equals(
        env,
        len(ctx.attr.expects),
        len(target_under_test.files.to_list()),
        "Must generate {} files, but got {}".format(len(ctx.attr.expects), target_under_test.files),
    )

    return analysistest.end(env)

optimize_ddk_config_actions_analysis_test = analysistest.make(
    impl = _optimize_ddk_config_actions_analysis_test,
    config_settings = {
        str(Label("//build/kernel/kleaf:optimize_ddk_config_actions")): True,
    },
    attrs = {
        "parent": attr.label(
            doc = "Sync with target_under_test's parent",
        ),
        "expects": attr.string_list(
            doc = "Allowed values: kconfig_ext, out_dir",
        ),
    },
)
